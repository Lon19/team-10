{"version":3,"sources":["Customisation.js","App.js","serviceWorker.js","index.js"],"names":["Customisation","cb","state","value","handleChange","bind","event","this","setState","target","props","className","styles","right","onChange","selected","Component","wards","require","lads","wards_features","feature","objects","features","lads_features","lad","console","log","wards_and_lads_values","wards_to_lads","map","w","i","ward","properties","WD13NM","wcdo","WD13CDO","l","ind","lcdo","LAD13CDO","substring","includes","LAD13NM","App","usesLads","wardsData","ladsData","change_region_preference","geoAlbers","center","rotate","parallels","scale","translate","fetch","then","res","json","response","data","JSON","parse","stringify","districts","length","j","wl","push","total","wd13nm","count","colour","render","get_all_data","d","projection","id","left","viewBox","transform","key","geoPath","data-ward-name","fill","compute_colour","stroke","strokeWidth","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d7fde8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport styles from \"./css/index.css\";\n\nclass Customisation extends Component {\n    constructor(cb) {\n        super(cb);\n        this.state = {value: \"ward\"};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n        this.props.cb(this.state.value);\n    }\n    render() {\n        return (\n            <div className={styles.right}>\n            <select onChange={this.handleChange}>\n                <option selected=\"selected\" value=\"ward\">Ward</option>\n                <option value=\"district\">District</option>\n            </select>\n            </div>\n        )\n    }\n}\n\nexport default Customisation\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { geoMercator, geoPath, geoEqualEarth, geoProjection, geoAlbers } from \"d3-geo\";\nimport styles from \"./css/index.css\";\nimport { feature } from \"topojson-client\";\nimport Customisation from \"./Customisation\"\n\n/*\nimport Header from './components/header';\nimport Home from './components/home';\nimport Address from './components/address';\n*/\n\nconst wards = require('./data/topo_wards.json');\nconst lads = require('./data/topo_lad.json');\nconst wards_features = feature(wards, wards.objects.wards).features;\nconst lads_features = feature(lads, lads.objects.lad).features;\nconsole.log(wards_features);\n\nlet wards_and_lads_values = {};\n//[w, l] -> value\nlet wards_to_lads = {};\nwards_features.map((w, i) => {\n\tlet ward = w.properties.WD13NM;\n\tlet wcdo = w.properties.WD13CDO;\n\tlads_features.map((l, ind) => {\n\t\tlet lcdo = l.properties.LAD13CDO;\n\t\tif (wcdo.substring(0, 4).includes(lcdo)) {\n\t\t\twards_to_lads[ward] = l.properties.LAD13NM;\n\t\t}\n\t});\n});\n\nclass App extends Component {\n    usesLads = false;\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n            wardsData: feature(wards, wards.objects.wards).features,\n            ladsData: feature(lads, lads.objects.lad).features,\n\t\t}\n        this.change_region_preference = this.change_region_preference.bind(this);\n\t}\n\tprojection() {\n\t\treturn geoAlbers()\n        .center([0, 55.4])\n           .rotate([4.4, 0])\n           .parallels([50, 60])\n\t\t\t.scale(3000)\n\t\t\t.translate([800/2, 450/2])\n\t\t/*geoAlbers()\n\t\t\t.center([0,42.954])\n  \t\t\t.parallels([41,44])\n  \t\t\t.translate([800/2,450/2])\nc  \t\t\t.scale(100)\n\t\t\t.scale(100)\n\t\t\t.translate([800/2, 450/2]);\n\t\t*/\n\t}\n\n    async get_all_data() {\n        const response = await fetch(\"http://127.0.0.1:5005/fetchData\").then(res=>res.json());\n\t\tconsole.log(response);\n        let data = JSON.parse(JSON.stringify(response));\n\t\tconsole.log(data);\n        let districts = data['districts'];\n\t\tconsole.log(districts);\n\t\tfor(var i = 0; i < districts.length; i++) {\n\t\t\tconsole.log(districts[i]);\n\t\t\tfor (var j = 0; j < districts[i]['wards'].length; j++) {\n\t\t\t\tlet wl = [];\n\t\t\t\twl.push(districts[i]['wards']['ward_name']);\n\t\t\t\twl.push(districts[i]['districtName']);\n\t\t\t\tlet total = 0;\n\t\t\t\ttotal += districts[i]['wards']['age-group'][0]['value'];\n\t\t\t\ttotal += districts[i]['wards']['age-group'][1]['value'];\n\t\t\t\twards_and_lads_values[wl] = total;\n\t\t\t}\n\t\t}\n       /*districts.map((d, ws) => {\n            ws.map((w) => {\n                let wl = [];\n                wl.append(w['ward_name']);\n                wl.append(d['districtName']);\n                let total = 0;\n                total += w['age-group'][0]['value'];\n                total += w['age-group'][1]['value'];\n                wards_and_lads_values[wl] = total;\n            })\n        })*/\n    }\n\n\n\n    async compute_colour(wd13nm) {\n        //const response = await axios.get(\"http://localhost:5005/fetchData?ward=\"+wd13nm+\"&lad=\" + wards_to_lads[wd13nm]);\n        // const response = fetch(\"http://127.0.0.1:5005/fetchData?ward=\"+wd13nm+\"&lad=\"+wards_to_lads[wd13nm]);\n        // fetch(\"http://127.0.0.1:5005/fetchData?ward=\"+wd13nm+\"&lad=\"+wards_to_lads[wd13nm]).then(\n\n        // for (int i = 0; i < data['age-group'].size())\n        let count = wards_and_lads_values[[wd13nm, wards_to_lads[wd13nm]]];\n        // let colour = (38, 50, 56, 0);\n        let colour = \"#666666\";\n        if (count <= 20) {\n            colour = \"#00ff00\";\n        } else if (count <= 50) {\n            colour = \"#006600\";\n        } else if (count <= 105) {\n            colour = \"ffff00\";\n        } else if (count <= 145) {\n            colour = \"#ff8106\";\n        } else if (count <= 260) {\n            colour = \"#990000\";\n        } else {\n            colour = \"#ff0000\";\n        }\n        return colour;\n    }\n\n    change_region_preference(value) {\n        if (value.includes(\"lads\")) {\n            this.setState({\n                usesLads: true\n            })\n        } else {\n            this.setState({\n                usesLads: false\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.render();\n    }\n\n\trender() {\n        this.get_all_data();\n\t\tthis.state.wardsData.map((d,i) => {\n\t\t\tif(i == 10) {\n\t\t\t\tconsole.log(d);\n\t\t\t}\n\t\t})\n\t\tconsole.log(this.projection())\n        if (!this.state.usesLads) {\n    \t\treturn (\n                <div>\n    \t\t    <svg className={styles.left} viewBox=\"0 0 800 450\">\n    \t\t        <g className=\"wards\" transform=\"scale()\">\n    \t\t          {this.state.wardsData.map((d,i) => (\n    \t\t              <path\n    \t\t                key={ `path-${ i }` }\n    \t\t                d={ geoPath().projection(this.projection())(d) }\n    \t\t                className=\"ward\"\n    \t\t\t\t\t\tdata-ward-name={ d.properties.WD13NM }\n    \t\t                fill={  this.compute_colour(d.properties.WD13NM) }\n    \t\t                stroke=\"#FFFFFF\"\n    \t\t                strokeWidth={ 0.5 }\n    \t\t              />\n                      ))\n    \t\t          }\n    \t\t        </g>\n    \t\t      </svg>\n                  <div>\n                    <Customisation cb={this.change_region_preference}>\n                    </Customisation>\n                  </div>\n                  </div>\n    \t\t    )\n        } else {\n            return (\n                <div id=\"wrapper\">\n                    <svg className={styles.left} viewBox=\"0 0 800 450\">\n        \t\t        <g className=\"wards\" transform=\"scale()\">\n        \t\t          {this.state.ladsData.map((d,i) => (\n        \t\t              <path\n        \t\t                key={ `path-${ i }` }\n        \t\t                d={ geoPath().projection(this.projection())(d) }\n        \t\t                className=\"ward\"\n        \t\t\t\t\t\tdata-ward-name={ d.properties.LAD13NM }\n        \t\t                fill={  this.compute_colour(d.properties.LAD13NM) }\n        \t\t                stroke=\"#FFFFFF\"\n        \t\t                strokeWidth={ 0.5 }\n        \t\t              />\n                          ))\n        \t\t          }\n        \t\t        </g>\n        \t\t      </svg>\n                      <div>\n                        <Customisation cb={this.change_region_preference}>\n                        </Customisation>\n                      </div>\n                  </div>\n    \t\t    )\n        }\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}